/*!
 * Etalon v0.0.1
 * 2015-2017 Dmitry Sachko ()
 * Based on Bootstrap 3.3.0
 */
// !!DO NOT OFF!! Required component! bootstrap.js

// Enable features JS from the Bootstrap. The order is important!
// When enabled, something should be included styles in the file Layout/_dev/less/bootstrap.less


// ## @include bootstrap/affix.js


// !!DO NOT OFF!! Required component! transition.js
/* ========================================================================
 * Bootstrap: transition.js v3.2.0
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

import jQuery from 'jquery';
const $ = window.$ = window.jQuery = jQuery;

(function ($) {

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.prototype.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

})(jQuery);



/* ========================================================================
 * Bootstrap: tooltip.js v3.2.0
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


(function ($) {

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       =
    this.options    =
    this.enabled    =
    this.timeout    =
    this.hoverState =
    this.$element   = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION  = '3.2.0'

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $(this.options.viewport.selector || this.options.viewport)

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger === 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger !== 'manual') {
        var eventIn  = trigger === 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger === 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay === 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] !== value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState === 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState === 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(document.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement === 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var $parent      = this.$element.parent()
        var parentDim    = this.getPosition($parent)

        placement = placement === 'bottom' && pos.top   + pos.height       + actualHeight - parentDim.scroll > parentDim.height ? 'top'    :
                    placement === 'top'    && pos.top   - parentDim.scroll - actualHeight < 0                                   ? 'bottom' :
                    placement === 'right'  && pos.right + actualWidth      > parentDim.width                                    ? 'left'   :
                    placement === 'left'   && pos.left  - actualWidth      < parentDim.left                                     ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(150) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  = offset.top  + marginTop
    offset.left = offset.left + marginLeft

    // $.prototype.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement === 'top' && actualHeight !== height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var arrowDelta          = delta.left ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowPosition       = delta.left ? 'left'        : 'top'
    var arrowOffsetPosition = delta.left ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], arrowPosition)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, position) {
    this.arrow().css(position, delta ? (50 * (1 - delta / dimension) + '%') : '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function () {
    var that = this
    var $tip = this.tip()
    var e    = $.Event('hide.bs.' + this.type)

    this.$element.removeAttr('aria-describedby')

    function complete() {
      if (that.hoverState !== 'in') $tip.detach()
      that.$element.trigger('hidden.bs.' + that.type)
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && this.$tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(150) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof ($e.attr('data-original-title')) !== 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element
    var el     = $element[0]
    var isBody = el.tagName === 'BODY'
    return $.extend({}, (typeof el.getBoundingClientRect === 'function') ? el.getBoundingClientRect() : null, {
      scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop(),
      width:  isBody ? $(window).width()  : $element.outerWidth(),
      height: isBody ? $(window).height() : $element.outerHeight()
    }, isBody ? { top: 0, left: 0 } : $element.offset())
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement === 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2  } :
           placement === 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2  } :
           placement === 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement === 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width   }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = (this.options.viewport && this.options.viewport.padding) || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.width) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title === 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    return (this.$tip = this.$tip || $(this.options.template))
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.validate = function () {
    if (!this.$element[0].parentNode) {
      this.hide()
      this.$element = null
      this.options  = null
    }
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
  }

  Tooltip.prototype.destroy = function () {
    clearTimeout(this.timeout)
    this.hide().$element.off('.' + this.type).removeData('bs.' + this.type)
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option === 'object' && option

      if (!data && option === 'destroy') return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option === 'string') data[option]()
    })
  }

  var old = $.prototype.tooltip

  $.prototype.tooltip             = Plugin
  $.prototype.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.prototype.tooltip.noConflict = function () {
    $.prototype.tooltip = old
    return this
  }

})(jQuery);

// ## @include bootstrap/alert.js
// ## @include bootstrap/button.js
// ## @include bootstrap/carousel.js


// !!DO NOT OFF!! Required component! collapse.js
/* ========================================================================
 * Bootstrap: collapse.js v3.2.0
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


(function ($) {
  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.transitioning = null

    if (this.options.parent) this.$parent = $(this.options.parent)
    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.2.0'

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var actives = this.$parent && this.$parent.find('> .panel > .in')

    if (actives && actives.length) {
      var hasData = actives.data('bs.collapse')
      if (hasData && hasData.transitioning) return
      Plugin.call(actives, 'hide')
      hasData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(350)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element
      .addClass('collapsing')
      .removeClass('collapse')
      .removeClass('in')

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .trigger('hidden.bs.collapse')
        .removeClass('collapsing')
        .addClass('collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element[dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(350)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option === 'object' && option)

      if (!data && options.toggle && option === 'show') option = !option
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option === 'string') data[option]()
    })
  }

  var old = $.prototype.collapse

  $.prototype.collapse             = Plugin
  $.prototype.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.prototype.collapse.noConflict = function () {
    $.prototype.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var href
    var $this   = $(this)
    var target  = $this.attr('data-target')
        || e.preventDefault()
        || ((href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
    var $target = $(target)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()
    var parent  = $this.attr('data-parent')
    var $parent = parent && $(parent)

    if (!data || !data.transitioning) {
      if ($parent) $parent.find('[data-toggle="collapse"][data-parent="' + parent + '"]').not($this).addClass('collapsed')
      $this[$target.hasClass('in') ? 'addClass' : 'removeClass']('collapsed')
    }

    Plugin.call($target, option)
  })

})(jQuery);



/* ========================================================================
 * Bootstrap: dropdown.js v3.2.0
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


(function ($) {
  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.2.0'

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.trigger('focus')

      $parent
        .toggleClass('open')
        .trigger('shown.bs.dropdown', relatedTarget)
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27)/.test(e.keyCode)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive || (isActive && e.keyCode === 27)) {
      if (e.which === 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.divider):visible a'
    var $items = $parent.find('[role="menu"]' + desc + ', [role="listbox"]' + desc)

    if (!$items.length) return

    var index = $items.index($items.filter(':focus'))

    if (e.keyCode === 38 && index > 0)                 index--                        // up
    if (e.keyCode === 40 && index < $items.length - 1) index++                        // down
    if (!~index)                                      index = 0

    $items.eq(index).trigger('focus')
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $parent = getParent($(this))
      var relatedTarget = { relatedTarget: this }
      if (!$parent.hasClass('open')) return
      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))
      if (e.isDefaultPrevented()) return
      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget)
    })
  }

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option === 'string') data[option].call($this)
    })
  }

  var old = $.prototype.dropdown

  $.prototype.dropdown             = Plugin
  $.prototype.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.prototype.dropdown.noConflict = function () {
    $.prototype.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', '.dropdown .open-dropdown', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle + ', [role="menu"], [role="listbox"]', Dropdown.prototype.keydown)

})(jQuery);


// !!DO NOT OFF!! Required component! modal.js
/* ========================================================================
 * Bootstrap: modal.js v3.2.0
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


(function ($) {
  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options        = options
    this.$body          = $(document.body)
    this.$element       = $(element)
    this.$backdrop      =
    this.isShown        = null
    this.scrollbarWidth = 0

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION  = '3.2.0'

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {

    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.$body.addClass('modal-open')

    this.setScrollbar()
    this.escape()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      that.$element
        .addClass('in')
        .attr('aria-hidden', false)

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$element.find('.modal-dialog') // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(300) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {

    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    if (jqApp.data)
    if (jqApp.data.callback) {
      jqApp.data.callback();
    }

    this.$body.removeClass('modal-open')

    this.resetScrollbar()
    this.escape()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .attr('aria-hidden', true)
      .off('click.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(300) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keyup.dismiss.bs.modal', $.proxy(function (e) {
        e.which === 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keyup.dismiss.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
          .insertAfter(this.$element);//Edits for modal HTML inset in component

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (e.target !== e.currentTarget) return
        this.options.backdrop === 'static'
          ? this.$element[0].focus.call(this.$element[0])
          : this.hide.call(this)
      }, this))

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(150) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(150) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  Modal.prototype.checkScrollbar = function () {
    if (document.body.clientWidth >= window.innerWidth) return
    this.scrollbarWidth = this.scrollbarWidth || this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    if (this.scrollbarWidth) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', '')
  }

  Modal.prototype.measureScrollbar = function () { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option === 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option === 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.prototype.modal

  $.prototype.modal             = Plugin
  $.prototype.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.prototype.modal.noConflict = function () {
    $.prototype.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

})(jQuery);



// ## @include bootstrap/popover.js
// ## @include bootstrap/scrollspy.js


// !!DO NOT OFF!! Required component! tab.js
/* ========================================================================
 * Bootstrap: tab.js v3.2.0
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


(function ($) {
  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    this.element = $(element)
  }

  Tab.VERSION = '3.2.0'

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var previous = $ul.find('.active:last a')[0]
    var e        = $.Event('show.bs.tab', {
      relatedTarget: previous
    })

    $this.trigger(e)

    if (e.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: previous
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && $active.hasClass('fade')

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
        .removeClass('active')

      element.addClass('active')

      if (transition) {
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu')) {
        element.closest('li.dropdown').addClass('active')
      }

      callback && callback()
    }

    transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(150) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option === 'string') data[option]()
    })
  }

  var old = $.prototype.tab

  $.prototype.tab             = Plugin
  $.prototype.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.prototype.tab.noConflict = function () {
    $.prototype.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  $(document).on('click.bs.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  })

})(jQuery);




//=====================================================================================================================
// global variables
var $window = $(window);
var $html = $('html');
var $body = $('body');
var $windowWidth = window.innerWidth;

// global jquery obj

var jqApp = {
    // Check working JS
    js_on: function() {
        var $js = $('.js-off');
        if ($js.length) {
            $js.removeClass('js-off').addClass('js-on');
        }
    },

    // ширина скроллбара
    getScrollbarWidth: function() {
        return parseInt(window.innerWidth, 10) - parseInt(document.body.clientWidth, 10);
    },

    // поддержка touch
    isTouch: function() {
        if (!!('ontouchstart' in window)) {
            $body.removeClass('touch-no').addClass('touch-yes');
            return true;
        } else {
            $body.removeClass('touch-yes').addClass('touch-no');
            return false;
        }
    },

    // Определяем ОС
    getOS: function() {
        var OSName= 'Unknown';
        var navigatorAppVersion = navigator.appVersion;

        if (navigatorAppVersion.indexOf('Win') !== -1) {
            OSName = 'Windows';
        } else if (navigatorAppVersion.indexOf('Mac') !== -1) {
            if (navigatorAppVersion.indexOf('iPhone') !== -1 || navigatorAppVersion.indexOf('iPad') !== -1) {
                OSName = 'IOS';
            } else {
                OSName = 'Mac';
            }
        } else if (navigatorAppVersion.indexOf('Android') !== -1) {
            OSName = 'Android';
        } else if (navigatorAppVersion.indexOf('X11') !== -1) {
            if (navigatorAppVersion.indexOf('Linux') !== -1) {
                OSName = 'Linux';
            } else {
                OSName = 'UNIX';
            }
        } else if (navigatorAppVersion.indexOf('Linux') !== -1) {
            OSName = 'Linux';
        }

        return OSName;
    },

    // Ставим класс тегу html тип ОС
    detectOS: function() {
        $html.addClass('os' + jqApp.getOS());
    },

    // Resize width
    isResizeWidth: function() {
        var width = window.innerWidth;
        if (width !== $windowWidth) {
            $windowWidth = width;
            $window.trigger('resizeWidth');
        }
    },

    // footer down
    footerDown: function() {
        var opt = {
            header: $('.g-header'),
            main: $('.g-main'),
            footer: $('.g-footer')
        };
        if (opt.main.length) {
            var position = opt.header.css('position');
            var windowHeight = $window.outerHeight();
            var headerHeight = opt.header.outerHeight();
            var footerHeight = opt.footer.outerHeight();
            if (position === 'fixed') {
                opt.main.css({
                    'padding-top': headerHeight
                });
                headerHeight = 0;
            } else {
                opt.main.css({
                    'padding-top': ''
                });
            }
            opt.minH = (windowHeight - headerHeight - footerHeight);
            opt.main.css({
                'min-height': opt.minH
            });
        }
    },

    // наведение на две ссылки
    autoHover: function() {
        var list = $('.js-hover');
        if (!list.length) {
            return false;
        }
        list.each(function () {
            var listSelf = $(this);
            var wrap = listSelf.find('.js-hover-wrap');
            if (wrap.length) {
                wrap.each(function () {
                    var wrapSelf = $(this);
                    var items = wrapSelf.find('.js-hover-trg');
                    if (items.length > 1) {
                        items.on('mouseenter', function () {
                            items.addClass('hover');
                        });
                        items.on('mouseleave', function () {
                            items.removeClass('hover');
                        });
                    }
                });
            }
        });
    },


    // Модальное окно Бутстрапа центрируем по вертикали по центру
    setModalHeight: function() {
        var modals = $('.vertical-center');
        if (!modals.length) {
            return false;
        }
        modals.each(function () {
            var self = $(this);
            self.on('show.bs.modal', function () {
                self.css({
                    'opacity': 1,
                    'display': 'block'
                });
                var modalDialog = self.find('.modal-dialog');
                modalDialog.css({
                    'margin-top': '',
                    'margin-bottom': ''
                });
                var selfHeight = self.outerHeight();
                var contentHeight = modalDialog.outerHeight() + 4;
                if (selfHeight > contentHeight) {
                    var margin = Math.floor((selfHeight - contentHeight) / 2);
                    modalDialog.css({
                        'margin-top': margin,
                        'margin-bottom': margin
                    });
                }
                self.css({
                    'opacity': '',
                    'display': ''
                });
            });
        });
    },


    // mobile menu
    mobileMenu: {

        _menuShow: function() {
            this.body.addClass(this.openClass).removeClass(this.closeClass);
            this.bodyPad = parseInt((this.body.css('padding-right') || 0), 10);
            if (!this.body.hasClass('ms-open') && !$body.hasClass('search-open')) {
                this.body.css('padding-right', this.bodyPad + this.scrollbarWidth);
                if (this.gheader.css('position') === 'fixed') {
                    this.gheader.css('padding-right', this.bodyPad + this.scrollbarWidth);
                }
            }
            this.btn.addClass('opened');
            if (this.backdrop.length && $.prototype.swipe) {
                this.backdrop.swipe({
                    swipeLeft: function () {
                        jqApp.mobileMenu._menuHide();
                    },
                    swipeUp: function () {
                        return false;
                    },
                    swipeDown: function () {
                        return false;
                    },
                    tap: function () {
                        jqApp.mobileMenu._menuHide();
                    },
                    threshold: 0,
                    fingers: 'all'
                });
            }
        },

        _menuHide: function() {
            this.body.addClass(this.closeClass).removeClass(this.openClass);
            if (!this.body.hasClass('ms-open') && !$body.hasClass('search-open')) {
                this.body.css('padding-right', this.originalBodyPad);
                this.gheader.css('padding-right', this.originalBodyPad);
            }
            this.btn.removeClass('opened');
            if (this.backdrop.length && $.prototype.swipe) {
                this.backdrop.swipe('destroy');
            }
        },

        init: function() {
            this.btn = $('.mm-opener');
            this.wrap = $('.mm-wrap');
            this.openClass = 'mm-open';
            this.closeClass = 'mm-close';
            this.backdrop = $('.mm-backdrop');
            if (!this.btn.length || !this.wrap.length || !this.backdrop.length) {
                return false;
            }
            this.btn.off('click.mobileMenu touch.mobileMenu');
            this.body = $('body');
            this.gheader = $('header');
            this.bodyPad = 0;
            this.originalBodyPad = 0;
            if (this.body.hasClass(this.closeClass)) {
                this.originalBodyPad = document.body.style.paddingRight || '';
            }
            this.wrap.css('padding-top', this.gheader.outerHeight());
            if (window.innerWidth >= 1024) {
                jqApp.mobileMenu._menuHide();
            } else {
                this.scrollbarWidth = jqApp.getScrollbarWidth();
                this.btn.on('click.mobileMenu touch.mobileMenu', function () {
                    var btn = $(this);
                    if (!btn.hasClass('opened')) {
                        jqApp.mobileMenu._menuShow();
                    } else {
                        jqApp.mobileMenu._menuHide();
                    }
                });
            }
        }
    },


    // обрезаем строку и ставим три точки
    cutTextTimeout: null,
    cutText: function() {
        var text = $('.post-card').find('.card-preview');
        if (!text.length) {
            return false;
        }

        var truncate = function(el) {
            var text = el.data('text');
            if (text === undefined) {
                return false;
            }
            var height = el.height();
            var width = el.width();
            var clone = el.clone().text(text);

            clone.css({
                'position': 'absolute',
                'visibility': 'hidden',
                'height': 'auto',
                'width': width,
                'max-height': 'none'
            });
            el.after(clone);

            var l = text.length - 1;
            for (; l >= 0 && clone.height() > height; --l) {
                clone.text(text.substring(0, l) + ' ...');
            }

            el.text(clone.text());
            clone.remove();
        };

        clearTimeout(jqApp.cutTextTimeout);
        jqApp.cutTextTimeout = setTimeout(function() {
            text.each(function() {
                truncate($(this));
            });
        }, 45);
    },


    // search
    search: {

        openSearch: function() {
            this.userPanel.removeClass('open').addClass('closed');
            this.searchPanel.removeClass('closed').addClass('open');
            this.searchInput.focus();
        },

        closeSearch: function() {
            this.searchPanel.removeClass('open').addClass('closed');
            this.userPanel.removeClass('closed').addClass('open');
        },

        addListeners: function() {
            var btnOpen = this.userPanel.find('.lnk-search').add('.lnk-search-mob');
            var btnClose = this.searchPanel.find('.btn-close');
            if (btnOpen.length) {
                btnOpen.off('click.searchOpen');
                btnOpen.on('click.searchOpen', function(e) {
                    e.preventDefault();
                    jqApp.search.openSearch();
                });
            }
            if (btnClose.length) {
                btnClose.off('click.searchClose');
                btnClose.on('click.searchClose', function(e) {
                    e.preventDefault();
                    jqApp.search.closeSearch();
                });
            }
        },

        init: function() {
            this.gheader = $('.g-header');
            this.userPanel = $('.user-panel');
            this.searchPanel = $('.search-panel');
            this.searchInput = this.searchPanel.find('.input-search');
            if (!this.userPanel.length || !this.searchInput.length) {
                return false;
            }

            this.addListeners();

            $window.on('resize', function() {
                if ($body.hasClass('search-open')) {
                    jqApp.search.showResults();
                }
            });
        }
    },

    // push message
    pushMessage: {

        timeout: null,

        _check: function() {
            this.wrap = $('.pm');
            if (!this.wrap.length) {
                return false;
            }
        },

        _getTemplate: function(text) {
            var _text = text;
            if (!_text) {
                return false;
            }
            return $('<div class="pm-item">' +
                '<div class="pm-wrap">' +
                '<div class="pm-text">' + _text + '</div>' +
                '</div>' +
                '</div>');
        },

        close: function(message) {
            message.fadeOut('slow', function() {
                message.remove();
            });
        },

        open: function(text) {
            jqApp.pushMessage._check();
            var message = jqApp.pushMessage._getTemplate(text);
            if (message.length) {
                clearTimeout(jqApp.pushMessage.timeout);
                jqApp.pushMessage.wrap.find('.pm-item').each(function() {
                    jqApp.pushMessage.close($(this));
                });
                jqApp.pushMessage.timeout = setTimeout(function() {
                    jqApp.pushMessage.close(message);
                }, 3000);
                jqApp.pushMessage.wrap.append(message);
                message.css('margin-bottom', - message.outerHeight());
                setTimeout(function() {
                    message.addClass('up');
                    message.css('margin-bottom', '');
                }, 10);
            }
        }
    },


    // окно с лайками
    likeModal: {

        // открыть модальное окно с лайками
        open: function() {
            this.modal.modal('show');
        },

        // закрыть модальное окно с лайками
        close: function() {
            this.modal.modal('hide');
        },

        addListeners: function() {
            this.modal.off('show.bs.modal');
            this.modal.on('show.bs.modal', function() {
                if ($body.hasClass('modal-open')) {
                    $body.addClass('modal-open-2');
                }
            });

            this.modal.off('hide.bs.modal');
            this.modal.on('hide.bs.modal', function() {
                if ($body.hasClass('modal-open-2')) {
                    setTimeout(function() {
                        $body.css('padding-right', jqApp.likeModal._getScrollWidth());
                    }, 0.1);
                }
            });

            this.modal.off('hidden.bs.modal');
            this.modal.on('hidden.bs.modal', function() {
                if ($body.hasClass('modal-open-2')) {
                    $body.addClass('modal-open');
                    $body.removeClass('modal-open-2');
                }
            });
        },

        _getScrollWidth: function() {
            return this.scrollWidth;
        },

        init: function() {
            this.modal = $('#likeModal');
            this.scrollWidth = jqApp.getScrollbarWidth();
            if (!this.modal.length) {
                return false;
            }
            this.addListeners();
        }
    },

    openPostModal: function($context) {
        var $modal = $('#postModal', $context);
        if ($modal.length) {
          $modal.modal('show');
          $modal.on('mousedown', function (e) {
            var parents = $(e.target).parents('.js--dont-close-post-modal', $modal)
              if (parents.length === 0){
                $modal.modal('hide');
              }
          });
        }
    },

    openLikesModal : function($context) {
      var $modal = $('#likesModal', $context);
      if ($modal.length) {
        $modal.modal('show');
        // $modal.on('mousedown', function (e) {
        //   var parents = $(e.target).parents('.js--dont-close-likes-modal', $modal)
        //     if (parents.length === 0){
        //       $modal.modal('hide');
        //     }
        // });
      }
    },

    closeLikesModal : function($context) {
      var $modal = $('#likesModal', $context);
      if ($modal.length) {
        $modal.modal('hide');
      }
    },

    // кастомный скролл
    customScrollbar: function(elements) {
        var items = elements !== undefined ? elements : $('.mScroll');
        if (items.length && $.prototype.mCustomScrollbar) {
            items.mCustomScrollbar({
                axis: 'y',
                scrollbarPosition: 'outside',
                theme: 'dark',
                scrollInertia: 800,
                mouseWheel:{ preventDefault: false }
            });
        }
    }
};

window.jqApp = jqApp;
export default jqApp;
